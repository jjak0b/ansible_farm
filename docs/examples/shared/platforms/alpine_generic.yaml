# this platform will download always the latest version by fetching releases from remote 
# Note that this platform require manual setup
---
- vars:
    # if these are not set will get latest
    # alpine_branch: v3.16
    # alpine_version: 3.16.1
    vm_name: "VM {{ vm.metadata.platform_name }}_{{ vm.metadata.target_name }}"
    # alpine_variant: 'alpine-virt'
    alpine_variant: 'alpine-standard'
    alpine_arch_names:
      "arm64": "aarch64"
      "amd64": "x86_64"
      "ppc64": "ppc64le"
  block:

    - name: Determine latest version for branch or for latest-stable
      vars:
        alpine_default_branch: "{{ alpine_branch | default('latest-stable', true) }}"
      block:

        - when: alpine_version is not defined or alpine_default_branch == 'latest-stable'
          vars:
            uri_base: "http://dl-cdn.alpinelinux.org/alpine/{{ alpine_default_branch }}/releases/{{ alpine_arch_names[ vm.metadata.target_name ] }}"
          block:
            # get last version number
            - name: "fetch releases - Determine latest version for branch or for latest-stable"
              uri:
                url: "{{ uri_base }}/latest-releases.yaml"
                return_content: yes
                body_format: raw
              register: version_fetch_result
              
            - name: Use latest version
              set_fact:
                alpine_branch: "{{ content.branch }}"
                alpine_version: "{{ content.version }}"
                sha256: "{{ content.sha256 }}"
              vars:
                content: "{{ version_fetch_result.content | from_yaml | selectattr('flavor', 'equalto', alpine_variant ) | list | first | to_json | from_json }}"
          rescue:
            - name: Use latest version fallback
              set_fact:
                alpine_branch: v3.16
                alpine_version: 3.16.1
                sha256: "6c7cb998ec2c8925d5a1239410a4d224b771203f916a18f8015f31169dd767a2"

    # Define VM
    - name: Define VM platform
      vars:
        uri_base: "http://dl-cdn.alpinelinux.org/alpine/{{ alpine_branch }}/releases/{{ alpine_arch_names[ vm.metadata.target_name ] }}"
        ssh_forward_port: "{{ hostvars[ vm_name ].ansible_port | default( 65535 | random( start=2201, seed=vm_name), true ) }}"
      block:

        - name: Set connection port for VM
          add_host:
            name: "{{ vm_name }}"
            ansible_port: "{{ ssh_forward_port }}"
        
        - name: Define platform definition
          vars:
            image_name: "{{ alpine_variant }}-{{ alpine_version }}-{{ alpine_arch_names[ vm.metadata.target_name ] }}"
          set_fact:
            vm:
              # metadata properties are used inside a task for installation and setup purposes
              metadata:
                # template: virtio
                name: "{{ vm_name }}"
                connection: "qemu:///session"
                auth: 
                  user: root
                  password: alpine
                  become_user: root
                  become_password: alpine
                  become_method: su
                sources:
                  - before_provision:
                      - callback: callbacks/sources/fetch.yaml
                        src: "{{ uri_base }}/{{ image_name }}.iso"
                        dest: "{{ image_name }}.iso"
                      - callback: callbacks/sources/copy.yaml
                        src: "{{ image_name }}.iso"
                        dest: &tmp_image_file_name_1 "tmp-{{ vm.metadata.platform_name }}_{{ vm.metadata.target_name }}_{{ image_name }}.iso"
#                      - callback: callbacks/sources/img_convert.yaml
#                        from: raw
#                        src: *tmp_image_file_name_1
#                        to: qcow2
#                        dest: &tmp_image_file_name_2 "tmp-{{ vm.metadata.platform_name }}_{{ vm.metadata.target_name }}_{{ image_name }}.qcow2"
                      # - callback: callbacks/sources/setup_linux_image.yaml
                      #  src: *tmp_image_file_name_1
                      #  keys_path: "{{ vm.metadata.tmp_dir }}id_ssh_rsa_vm"
                    on_provision:
                      src: *tmp_image_file_name_1
                      dest: &image_file_name "{{ vm.metadata.platform_name }}_{{ vm.metadata.target_name }}_{{ image_name }}.iso"
              disks:
                - type: raw
                  devname: "hda"
                  src: *image_file_name
              net:
                type: user
                source: "hostfwd=tcp:127.0.0.1:{{ ssh_forward_port }}-:22"
                mac: "{{ '52:54:00' | random_mac( seed = vm_name ) }}"
                # note: user networking is associated to hypervisor's ip
                ip: "localhost"

