---

- name: "Init VM's network"
  block:
  - name: Define Network
    include_role: 
      name: libvirt_network
      tasks_from: define
  - name: Insert DHCP entry
    include_role:
      name: libvirt_network
      tasks_from: add
    vars:
      mac: "{{ vm.net.mac }}"
      ip: "{{ vm.net.ip }}"
      hostname: "{{ vm.metadata.hostname }}"
  vars:
    name: "{{ vm.net.source }}"
    libvirt_uri: "{{ vm.metadata.connection | default(omit, true) }}"
  when: vm.net is defined and vm.net.type == 'network'

- name: "Init VM's ansible host"
  block:
  - name: "include VM '{{ vm.metadata.name }}' as ansible's inventory host"
    add_host:
      name: "{{ vm.metadata.name }}"
      groups:
      - vms 
      - "{{ vm.metadata.name }}"
      - "{{ vm.metadata.platform_name }}"
      - "{{ vm.metadata.target_name }}"

      # ansible_connection: ssh 
      # ansible_port: "22"
      ansible_user: "{{ vm.metadata.auth is defined and vm.metadata.auth.user is defined | ternary( vm.metadata.auth.user, omit ) }}"
      ansible_password: "{{ vm.metadata.auth is defined and vm.metadata.auth.password is defined | ternary( vm.metadata.auth.password, omit ) }}"
      ansible_become_method: "{{ vm.metadata.auth is defined and vm.metadata.auth.become_method is defined | ternary( vm.metadata.auth.become_method, omit ) }}"
      ansible_become_user: "{{ vm.metadata.auth is defined and vm.metadata.auth.become_user is defined | ternary( vm.metadata.auth.become_user, omit ) }}"
      ansible_become_password: "{{ vm.metadata.auth is defined and vm.metadata.auth.become_password is defined | ternary( vm.metadata.auth.become_password, omit ) }}"

      ansible_host: "{{ vm.net.ip }}"
      ansible_hostname: "{{ vm.metadata.hostname }}"
      # other host vars
      vm: "{{ vm }}"
      kvm_host: "{{ inventory_hostname }}"

  # need to place it here because after the previous add_host module, i can know if a different connection type have been specified from host_vars / group_vars
  - name: "Update VM's ansible_host as VM's domain name for libvirt_qemu connection plugin"
    add_host:
      name: "{{ vm.metadata.name }}"
      ansible_host: "{{ hostvars[ vm.metadata.name ].inventory_hostname }}"
      ansible_libvirt_uri: "{{ vm.metadata.connection | default(omit, true) }}"
    when:
      - hostvars[ vm.metadata.name ].ansible_connection is defined
      - hostvars[ vm.metadata.name ].ansible_connection == 'community.libvirt.libvirt_qemu'

  - name: Setup Proxy jumps
    vars:
      hostjumps: "{{ ( hostvars[ hostvars[ vm.metadata.name ].kvm_host ].hostjumps | default([]) ) + [ hostvars[ vm.metadata.name ].kvm_host ] }}"
    when:
      - hostvars[ vm.metadata.name ].kvm_host is defined
      - hostvars[ vm.metadata.name ].kvm_host in hostvars
    block:
        
      - name: Init Proxy jumps
        set_fact:
          proxyjumps: []
      - name: build needed ssh proxy hosts
        loop: "{{ hostjumps }}"
        loop_control:
          loop_var: node_name
        set_fact:
          proxyjumps: "{{ proxyjumps + [ jump ] }}"
        vars:
          jump: "{{ [ [ hostvars[ node_name ].ansible_user, hostvars[ node_name ].ansible_host ] | join('@'), hostvars[ node_name ].ansible_port | default(22, true) | string ] | join( ':' ) }}"
        
      - debug:
          var: proxyjumps

      - name: Setup ProxyJumps
        when:
          - proxyjumps | length > 0
        add_host:
          name: "{{ vm.metadata.name }}"
          ansible_ssh_common_args: >
            -J {{ proxyjumps | join(',') }}
            -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
          hostjumps: "{{ hostjumps }}"
