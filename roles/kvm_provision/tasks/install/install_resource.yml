- name: Check image uri
  uri:
    url: "{{ source.uri }}"
    method: HEAD
  register: cloudimg_http_stat
  check_mode: false

- name: Check local image
  stat:
    path: &resource_install_path "{{ vm.metadata.libvirt_pool_dir }}{{ source.resource_name }}"
    get_checksum: false
  register: cloudimg_local_stat

- name: "Update image {{ source.resource_name }}"
  get_url:
    url: "{{ source.uri }}"
    dest: *resource_install_path
    timeout: 20
  when: not cloudimg_local_stat.stat.exists or
        cloudimg_local_stat.stat.size != cloudimg_http_stat.content_length
  register: cloudimg_local_updated

- name: "Unarchive if resource is an archive"
  include_tasks: unarchive.yml
  when: source.resource_name != source.unarchived

#- name: Convert image into type format
#  shell:
#    chdir: "{{ vm.metadata.libvirt_pool_dir }}"
#    cmd: "qemu-img convert -f {{ source.type }}{{ source.resource_name }}"
#    creates: "{{ vm.metadata.libvirt_pool_dir }}{{ source.unarchived }}"
#  when: cloudimg_local_updated.changed|bool

- name: Ensure image is accessible by libvirt-qemu group
  file:
    path: "{{ vm.metadata.libvirt_pool_dir }}{{ source.unarchived }}" 
    owner: "{{ ansible_env.USER }}"
    group: libvirt-qemu
    mode: u+rwx,g+rwx,o+rx
  become: True

# TODO: give error errorno 2: file or direcotry not found
# - name: Configure the image
#  command: |
#    virt-customize -a {{ vm.metadata.libvirt_pool_dir }}{{ source.unarchived }} \
#    --hostname {{ vm.metadata.hostname }} \
#    --root-password password:{{ vm.metadata.auth.become_password }} \
#    --ssh-inject root:file:{{ vm.metadata.import.ssh_key }} \
# doesn't work even if using become
#  become: yes 
  # when: TODO: this should be done iff this is rootfs