# unarchive task

- name: prepraring unarchive
  vars:
    src_path: "{{ (vm.metadata.tmp_dir, source.resource_name) | path_join }}"
    dest_path: "{{ vm.metadata.tmp_dir }}"
  block:

    - name: init unarchive
      set_fact:
        hasBeenUnarchived: false
        unarchive_result: null 
    
    - name: unarchive resource
      vars:
        unarchive_cases: 
          # .gz and .tar.gz
          - name: gzip
            pattern: "(\\.tar)?\\.gz$"
            cmd: "gzip -dkf {{ src_path }}"
          # .bz2 and not .tar.bz2
          - name: bunzip2
            pattern: "(?!\\.tar)\\.bz2$"
            cmd: "bunzip2 -kf {{ src_path }}"
      block:
        - name: "Un-archive with '{{ case.name }}'"
          loop: "{{ unarchive_cases }}"

          shell: "{{ case.cmd }}"
          when: 
            - source.resource_name is regex( case.pattern )
          register: unarchive_result

          loop_control:
            loop_var: case

        - name: Un-archive with generic unarchive
          unarchive: 
            src: "{{ src_path }}"
            dest: "{{ dest_path }}"
          register: unarchive_result
          when: unarchive_result is skipped

        - name: set unarchive results
          set_fact:
            hasBeenUnarchived: "{{ unarchive_result is succeeded and not (unarchive_result is skipped) }}"
            unarchive_result: null
