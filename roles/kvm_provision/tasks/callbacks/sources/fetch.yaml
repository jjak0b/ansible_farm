- name: Check local resource
  stat:
    path: &resource_install_path "{{ vm.metadata.libvirt_pool_dir }}{{ source.resource_name }}"
    get_checksum: false
  register: cloudres_local_stat

- name: Check local img
  stat:
    path: &img_install_path "{{ vm.metadata.libvirt_pool_dir }}{{ source.asset_name }}"
    get_checksum: false
  register: img_local_stat

- name: check uri type
  set_fact:
    isValidURL: "{{ source.uri is defined and source.uri is match( '((http|https|ftp):\/\/).*' ) }}"
    shouldUpdateImg: "{{ not img_local_stat.stat.exists }}"

- name: Fetch URI
  block:
  - name: Check image uri
    uri:
      url: "{{ source.uri }}"
      method: HEAD
    register: cloudimg_http_stat
    check_mode: false
    when: source.uri is defined and isValidURL
  
  - name: check should update if local img doesn't exists or resource doesn't exists or cached resource and remote mismatch
    set_fact:
      shouldUpdateImg: "{{ shouldUpdateImg or not cloudres_local_stat.stat.exists or 
                        ( cloudimg_http_stat is succeeded and cloudres_local_stat.stat.size != cloudimg_http_stat.content_length )
                      }}"
    
  - name: "Update image {{ source.resource_name }}"
    get_url:
      url: "{{ source.uri }}"
      dest: *resource_install_path
      timeout: 20
    when: source.uri is defined and isValidURL and shouldUpdateImg
    register: cloudimg_local_updated

  - name: check should update if resource has been fetched or image is missing and cache exists or should force to use cache
    set_fact: 
      shouldUpdateImg: "{{ (cloudimg_local_updated is succeeded and cloudimg_local_updated.changed)
                        or (not img_local_stat.stat.exists and cloudres_local_stat.stat.exists )
                        or ( (force is defined and force) and cloudres_local_stat.stat.exists ) }}"