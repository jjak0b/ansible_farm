# parameters
# - ansible_libvirt_uri: (optional) the libvirt uri used for the connection, if provided it may provide more infos
# facts
# - libvirt_capabilities_result: The result of the fetch operation capability. the .stdout contains the virsh output is a string in xml format
# - libvirt_supported_virtualizzation_types: dictionary of (arch, list of domains/virtualization types)
---

- name: Fetch virt capabilities
  shell: 
    cmd: >-
      virsh
      {{ (ansible_libvirt_uri | default(omit, true)) | ternary( '--connect ' + (ansible_libvirt_uri | quote), '') }}
      capabilities
  register: libvirt_capabilities_result
  ignore_errors: true
  
- name: Update libvirt capabilities
  set_fact:
    libvirt_capabilities: "{{ libvirt_capabilities_result.stdout | ansible.utils.from_xml }}"
    libvirt_supported_virtualization_types: {}
  when: libvirt_capabilities_result is succeeded

- name: Get supported virtualizzation types (domains)
  loop: "{{ libvirt_capabilities.capabilities.guest | map( attribute='arch' ) | map( attribute='@name') | zip( libvirt_capabilities.capabilities.guest | map( attribute='arch' ) | map( attribute='domain') ) }}"
  loop_control:
    loop_var: archName_domainStruct
    label: "{{ arch }} has {{ domains }} support"
  vars:
    arch: "{{ archName_domainStruct[0] }}"
    domains: "{{ archName_domainStruct[1] is mapping | ternary( [ archName_domainStruct[1][ '@type' ] ], archName_domainStruct[1] | map(attribute='@type')  ) }}"
  set_fact:
    libvirt_supported_virtualization_types: "{{ libvirt_supported_virtualization_types | combine( { arch: domains } )}}"
  when: libvirt_capabilities_result is succeeded

