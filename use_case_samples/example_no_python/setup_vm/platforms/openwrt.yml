# IMPORTANT: Ansible won't be able to connect into the VM of this platform because of 2 reasons:
# 1)  the ip address set on the image is statically set on 192.168.1.1.
#     You need to edit the network config using like a initscript
#     by editing manually the image on post install (for example using virt-customize).
# 2)  This platform doesn't contain python so the ansible connection will wait until timeout (wait_for_connection)
#     because it rely on the ping ansible module which expect python to be installed on remote host.
#     Since the ssh is enabled you have to set the variable wait_until_port_reachable: true for this platform's host
#     such that guest_provision role will wait until ssh port is reachable and so connect to using using ssh only
#     and controller may use the raw module to install python on it or any other tasks. 
#   

---

- name: Defining platform
  vars:
    version: "21.02.2"
    # foreach target add (image_name, resource_name) 
    imageResource:
      amd64:
      - [ generic-kernel.bin ] 
      - [ generic-ext4-rootfs.img, .gz ] 
      armvirt:
      - [ Image ] 
      - [ rootfs-ext4.img, .gz ] 
  block:
  - name: Preprocessing
    vars:
      base_url: "https://downloads.openwrt.org/releases/{{ version }}/targets/{{ vm.arch_family }}/{{ vm.arch_subtarget }}"
      base_image: "openwrt-{{ version }}-{{ vm.arch_family }}-{{ vm.arch_subtarget }}"
    block:
    - name: Define platform definition
      # preprocess names 
      vars:
        resource_names: "{{ [ base_image ] | product( imageResource[ vm.metadata.target_name ] | map('join', '') ) | map('join', '-') }}"
        image_names: "{{ [ base_image ] | product( imageResource[ vm.metadata.target_name ] | map('first') ) | map('join', '-') }}"
      set_fact:
        vm:
          metadata:
            connection: "qemu:///system"
            libvirt_pool_dir: "{{ansible_env.HOME}}/.local/share/libvirt/images/"
            auth:
              user: root
              become_user: root
            callbacks:
              sources:
                - before_provision:
                  - callbacks/sources/fetch_and_unarchive.yaml
                - before_provision:
                  - callbacks/sources/fetch_and_unarchive.yaml
            sources:
            - uri: "{{ base_url }}/{{ resource_names[ 0 ] }}"
              resource_name: "{{ resource_names[ 0 ] }}"
              checksum_type: null
              checksum_value: null
              asset_name: &kernel_file_name "{{ image_names[ 0 ] }}"

            - uri: "{{ base_url }}/{{ resource_names[ 1 ] }}"
              resource_name: "{{ resource_names[ 1 ] }}"
              checksum_type: null
              checksum_value: null
              asset_name: &rootfs_file_name "{{ image_names[ 1 ] }}"
          
          #  Others properties are fully custom to templating a custom vm's xml  #
          
          net:
            type: network
            source: default-net
            ip: "10.0.0.{{ 10 + lookup('ansible.utils.index_of', imageResource | dict2items | map(attribute='key') | sort, 'eq', vm.metadata.target_name ) }}"

          #  Some properties here, if needed, could override specific architecture values for all architectures  #
          kernel:
            src: *kernel_file_name
            params: "console=ttyAMA0 root=/dev/vda rootfstype=ext4 rootwait"
          disks:
          - type: "raw"
            devname: "vda"
            src: *rootfs_file_name


